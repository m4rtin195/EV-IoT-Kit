openapi: "3.0.1"
info:
  title: "EV-IoT-Kit API"
  description: "This is an API for cloud backend of EV-IoT-Kit project. Server side\
    \ is running on AWS API Gateway. \n\n More about project at\n[m4rtin195.github.io/EV-IoT-Kit/](https://m4rtin195.github.io/EV-IoT-Kit/)\
    \ \n\n Martin Timko, 2021"
  contact:
    email: "martin.timko195@gmail.com"
  version: "v3"

servers:
- url: "https://uilqy1jfsf.execute-api.eu-central-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "v3"

tags:
- name: "Sigfox"
  description: "Endpoints for Sigfox Backend."
  externalDocs:
    description: "Console"
    url: "https://backend.sigfox.com/"
- name: "WLAN"
  description: "Endpoints for direct vehicle connection."
- name: "Android"
  description: "Endpoints for Android client."

paths:
  /android/last:
    get:
      tags:
      - "Android"
      description: "Get the last available status for the requested vehicle."
      parameters:
      - name: "userId"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "vehicleId"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "User-Agent"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content: {}
        "400":
          description: "Bad Request"
          content: {}
        "401":
          description: "Unauthorized"
          content: {}
        "500":
          description: "Server Error"
          content: {}
        "204":
          description: "Status for the requested vehicleId was not found"
          content: {}
        "403":
          description: "Vehicle Forbidden"
          content: {}
      security:
      - User-Authorizer: []
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:get-status-last/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /android/range:
    get:
      tags:
      - "Android"
      description: "Get bulk of available statuses for the requested vehicle, from\
        \ requested time range."
      parameters:
      - name: "userId"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "timeTo"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "timeFrom"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "vehicleId"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "User-Agent"
        in: "header"
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content: {}
        "400":
          description: "400 response"
          content: {}
        "401":
          description: "Bad Request"
          content: {}
        "500":
          description: "Server Error"
          content: {}
        "204":
          description: "Statuses for the requested vehicleId or range were not found."
          content: {}
        "403":
          description: "Vehicle Forbidden"
          content: {}
      security:
      - User-Authorizer: []
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:get-status-range/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /android/fcm-register:
    post:
      tags:
      - "Android"
      description: "Registers or unregisters the app instance to FCM updates."
      parameters:
      - name: "userId"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "vehicleId"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "User-Agent"
        in: "header"
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FcmRegistration"
        required: true
      responses:
        "200":
          description: "OK"
          content: {}
        "400":
          description: "Bad Request"
          content: {}
        "401":
          description: "Unauthorized"
          content: {}
        "500":
          description: "Server Error"
          content: {}
        "403":
          description: "Vehicle Forbidden"
          content: {}
      security:
      - User-Authorizer: []
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:fcm-registration/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /*proxy*:
    x-amazon-apigateway-any-method:
      parameters:
      - name: "proxy"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "418":
          description: "Wrong path/method"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "418"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  
  /android/fcm-unregister:
    post:
      deprecated: true
      tags:
      - "Android"
      description: "Deprecated. Use fcm-register with 'register: false' instead. \n\
        Registers the app instance to FCM updates."
      parameters:
      - name: "userId"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "vehicleId"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "User-Agent"
        in: "header"
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FcmRegistration"
        required: true
      responses:
        "200":
          description: "OK"
          content: {}
        "400":
          description: "Bad Request"
          content: {}
        "401":
          description: "Unauthorized"
          content: {}
        "500":
          description: "Server Error"
          content: {}
        "403":
          description: "Vehicle Forbidden"
          content: {}
      security:
      - User-Authorizer: []
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:fcm-registration/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /online:
    head:
      description: "For check if API is online."
      operationId: "headOnline"
      responses:
        "200":
          description: "Yes, online"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  
  /test:
    post:
      description: "Used for testing."
      operationId: "postTest"
      responses:
        "200":
          description: "..."
          content: {}
        "418":
          description: "Wrong path/method"
          content: {}
      security:
      - User-Authorizer: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    x-amazon-apigateway-any-method:
      responses:
        "418":
          description: "Wrong path/method"
          content: {}
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:proxy-418/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /sigfox/uplink:
    post:
      tags:
      - "Sigfox"
      description: "For obtaining new data from Sigfox Backend."
      operationId: "postSigfoxUplink"
      parameters:
      - name: "connectivityMethod"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleStatus"
        required: true
      responses:
        "207":
          description: "Partially failed, check body for more details"
          content: {}
        "201":
          description: "Successfully wrote into the database and sent to FCM backend"
          content: {}
        "400":
          description: "Bad Request"
          content: {}
        "401":
          description: "Unauthorized"
          content: {}
        "500":
          description: "Server Error"
          content: {}
      security:
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:status-receive/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /:
    x-amazon-apigateway-any-method:
      responses:
        "418":
          description: "Wrong path/method"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "418"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  
  /wlan:
    post:
      tags:
      - "WLAN"
      description: "For obtaining new data directly from the vehicle."
      parameters:
      - name: "connectivityMethod"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VehicleStatus"
        required: true
      responses:
        "207":
          description: "Partially failed, check body for more details"
          content: {}
        "201":
          description: "Successfully wrote into the database and sent to FCM backend"
          content: {}
        "400":
          description: "Bad Request"
          content: {}
        "401":
          description: "Unauthorized"
          content: {}
        "500":
          description: "Server Error"
          content: {}
      security:
      - api_key: []
      x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:status-receive/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  
  /sigfox/downlink:
    post:
      deprecated: true
      tags:
      - "Sigfox"
      description: "Reserved for future use."
      operationId: "postSigfoxDownlink"
      responses:
        "401":
          description: "Unauthorized"
          content: {}
        "200":
          description: "200 response"
          content: {}
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

components:
  schemas:
    FcmRegistration:
      required:
      - "fcmToken"
      - "vehicleId"
      type: "object"
      properties:
        vehicleId:
          type: "string"
        fcmToken:
          type: "string"
        register:
          type: "boolean"
    VehicleStatus:
      required:
      - "timestamp"
      - "vehicleId"
      type: "object"
      properties:
        id:
          type: "string"
        vehicleId:
          type: "string"
        timestamp:
          type: "integer"
          format: "int32"
        connectivity:
          type: "integer"
          format: "int32"
          enum:
          - -1
          - 0
          - 1
          - 2
        state:
          type: "integer"
          format: "int32"
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
        current_charge:
          type: "integer"
          format: "int32"
        target_charge:
          type: "integer"
          format: "int32"
        current:
          type: "integer"
          format: "int32"
        elapsed_time:
          type: "integer"
          format: "int32"
        remain_time:
          type: "integer"
          format: "int32"
        range:
          type: "integer"
          format: "int32"
        outdoor_temperature:
          type: "number"
        indoor_temperature:
          type: "number"
        location:
          type: "string"
        max_current:
          type: "integer"
          format: "int32"
        desired_temperature:
          type: "number"
  
  securitySchemes:
    User-Authorizer:
      type: "apiKey"
      description: "Authorizes the user's ownership of the requested vehicle"
      name: "Unused"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:801154222515:function:api-authorizer/invocations"
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.userId, method.request.querystring.vehicleId"
        type: "request"
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"

x-amazon-apigateway-documentation:
  version: "2.0"
  createdDate: "2021-11-25T18:38:32Z"
  documentationParts:
  - location:
      type: "API"
    properties:
      info:
        description: "This is an API for cloud backend of EV-IoT-Kit project. Server\
          \ side is running on AWS API Gateway. \n\n More about project at\n[m4rtin195.github.io/EV-IoT-Kit/](https://m4rtin195.github.io/EV-IoT-Kit/)\
          \ \n\n Martin Timko, 2021"
        contact:
          email: "martin.timko195@gmail.com"
      tags:
      - name: "Sigfox"
        description: "Endpoints for Sigfox Backend."
        externalDocs:
          description: "Console"
          url: "https://backend.sigfox.com/"
      - name: "WLAN"
        description: "Endpoints for direct vehicle connection."
      - name: "Android"
        description: "Endpoints for Android client."
  - location:
      type: "AUTHORIZER"
      name: "User-Authorizer"
    properties:
      description: "Authorizes the user's ownership of the requested vehicle"
  - location:
      type: "METHOD"
      path: "/android/fcm-register"
      method: "POST"
    properties:
      tags:
      - "Android"
      description: "Registers or unregisters the app instance to FCM updates."
  - location:
      type: "METHOD"
      path: "/android/fcm-unregister"
      method: "POST"
    properties:
      tags:
      - "Android"
      description: "Deprecated. Use fcm-register with 'register: false' instead. \n\
        Registers the app instance to FCM updates."
  - location:
      type: "METHOD"
      path: "/android/last"
      method: "GET"
    properties:
      tags:
      - "Android"
      description: "Get the last available status for the requested vehicle."
  - location:
      type: "METHOD"
      path: "/android/range"
      method: "GET"
    properties:
      tags:
      - "Android"
      description: "Get bulk of available statuses for the requested vehicle, from\
        \ requested time range."
  - location:
      type: "METHOD"
      path: "/online"
      method: "HEAD"
    properties:
      description: "For check if API is online."
  - location:
      type: "METHOD"
      path: "/sigfox/downlink"
      method: "POST"
    properties:
      tags:
      - "Sigfox"
      description: "Reserved for future use."
  - location:
      type: "METHOD"
      path: "/sigfox/uplink"
      method: "POST"
    properties:
      tags:
      - "Sigfox"
      description: "For obtaining new data from Sigfox Backend."
  - location:
      type: "METHOD"
      path: "/test"
      method: "POST"
    properties:
      description: "Used for testing."
  - location:
      type: "METHOD"
      path: "/wlan"
      method: "POST"
    properties:
      tags:
      - "WLAN"
      description: "For obtaining new data directly from the vehicle."
  - location:
      type: "RESPONSE"
      method: "*"
      statusCode: "418"
    properties:
      description: "Wrong path/method"
  - location:
      type: "RESPONSE"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-register"
      method: "POST"
      statusCode: "200"
    properties:
      description: "OK"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-register"
      method: "POST"
      statusCode: "400"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-register"
      method: "POST"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-register"
      method: "POST"
      statusCode: "403"
    properties:
      description: "Vehicle Forbidden"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-register"
      method: "POST"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-unregister"
      method: "POST"
      statusCode: "200"
    properties:
      description: "OK"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-unregister"
      method: "POST"
      statusCode: "400"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-unregister"
      method: "POST"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-unregister"
      method: "POST"
      statusCode: "403"
    properties:
      description: "Vehicle Forbidden"
  - location:
      type: "RESPONSE"
      path: "/android/fcm-unregister"
      method: "POST"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "200"
    properties:
      description: "OK"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "204"
    properties:
      description: "Status for the requested vehicleId was not found"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "400"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "403"
    properties:
      description: "Vehicle Forbidden"
  - location:
      type: "RESPONSE"
      path: "/android/last"
      method: "GET"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "200"
    properties:
      description: "OK"
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "204"
    properties:
      description: "Statuses for the requested vehicleId or range were not found."
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "400"
    properties:
      description: "400 response"
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "401"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "403"
    properties:
      description: "Vehicle Forbidden"
  - location:
      type: "RESPONSE"
      path: "/android/range"
      method: "GET"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/online"
      method: "HEAD"
      statusCode: "200"
    properties:
      description: "Yes, online"
  - location:
      type: "RESPONSE"
      path: "/sigfox/downlink"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/sigfox/downlink"
      method: "POST"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/sigfox/uplink"
      method: "POST"
      statusCode: "201"
    properties:
      description: "Successfully wrote into the database and sent to FCM backend"
  - location:
      type: "RESPONSE"
      path: "/sigfox/uplink"
      method: "POST"
      statusCode: "207"
    properties:
      description: "Partially failed, check body for more details"
  - location:
      type: "RESPONSE"
      path: "/sigfox/uplink"
      method: "POST"
      statusCode: "400"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/sigfox/uplink"
      method: "POST"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/sigfox/uplink"
      method: "POST"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/test"
      method: "POST"
      statusCode: "200"
    properties:
      description: "..."
  - location:
      type: "RESPONSE"
      path: "/wlan"
      method: "POST"
      statusCode: "201"
    properties:
      description: "Successfully wrote into the database and sent to FCM backend"
  - location:
      type: "RESPONSE"
      path: "/wlan"
      method: "POST"
      statusCode: "207"
    properties:
      description: "Partially failed, check body for more details"
  - location:
      type: "RESPONSE"
      path: "/wlan"
      method: "POST"
      statusCode: "400"
    properties:
      description: "Bad Request"
  - location:
      type: "RESPONSE"
      path: "/wlan"
      method: "POST"
      statusCode: "401"
    properties:
      description: "Unauthorized"
  - location:
      type: "RESPONSE"
      path: "/wlan"
      method: "POST"
      statusCode: "500"
    properties:
      description: "Server Error"
  - location:
      type: "RESPONSE"
      path: "/{proxy+}"
      method: "*"
      statusCode: "418"
    properties:
      description: "Wrong path/method"

x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false